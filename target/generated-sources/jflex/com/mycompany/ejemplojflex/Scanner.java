// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: src/main/jflex/analizador.lex

//user code
package com.mycompany.ejemplojflex;

//Opciones y definiciones regulares

@SuppressWarnings("fallthrough")
public class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\2\1\3"+
    "\2\0\1\2\1\4\1\5\2\6\1\2\1\7\1\6"+
    "\1\10\1\11\1\2\12\12\1\6\1\13\1\14\1\15"+
    "\1\16\2\6\32\17\1\20\1\0\1\21\1\2\1\22"+
    "\1\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\17\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\17\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\6\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\3\1\1\32\3"+
    "\6\0\13\3\1\4\10\3\1\4\23\3\3\0\24\3"+
    "\1\4\25\3\2\0\4\3\1\4\12\3\1\0\14\3"+
    "\1\4\1\3\2\0\5\3\1\4\2\3\3\0\10\3"+
    "\1\4\2\3\2\0\6\3\5\0\5\3\2\0\2\3"+
    "\3\0\1\5\3\0\5\3\2\0\2\3\3\0\2\3"+
    "\6\0\1\3\1\0\1\4\1\3\22\0\1\6\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\56\0\134\0\212\0\270\0\346\0\56"+
    "\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\212\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u09b4\0\u09e2\0\u0228\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a"+
    "\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca"+
    "\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a"+
    "\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa"+
    "\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a"+
    "\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa"+
    "\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a"+
    "\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba"+
    "\0\u1ee8\0\u144e\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc"+
    "\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c"+
    "\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc"+
    "\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2\0\56\0\u23f0\0\u241e"+
    "\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e"+
    "\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0\0\u26fe"+
    "\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812\0\u2840\0\u18cc"+
    "\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982\0\u29b0"+
    "\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\u2b20"+
    "\0\u2b4e\0\u2b7c\0\u2baa\0\56\0\u2bd8\0\u2c06\0\u2c34\0\u2c62"+
    "\0\u2c90\0\u2cbe\0\u2cec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\10\1\15\1\4\1\16\1\17"+
    "\2\10\1\2\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\17\1\27\1\17\1\30\1\17\1\31\1\17"+
    "\1\32\1\33\1\34\1\35\1\17\1\36\1\37\3\17"+
    "\1\40\1\41\1\10\73\0\1\10\40\0\3\42\1\10"+
    "\52\42\4\0\1\10\10\0\1\10\57\0\1\43\3\0"+
    "\30\43\12\0\1\10\5\0\1\10\50\0\1\10\4\0"+
    "\2\10\50\0\1\44\45\0\1\45\7\0\1\46\1\14"+
    "\4\0\1\47\3\0\30\47\1\0\1\45\15\0\1\4"+
    "\1\10\55\0\1\10\1\50\51\0\1\17\4\0\1\17"+
    "\2\0\31\17\15\0\1\17\4\0\1\17\2\0\2\17"+
    "\1\51\16\17\1\52\7\17\15\0\1\17\4\0\1\17"+
    "\2\0\16\17\1\53\1\17\1\54\6\17\1\55\1\17"+
    "\15\0\1\17\4\0\1\17\2\0\1\17\1\56\6\17"+
    "\1\57\2\17\1\60\2\17\1\61\12\17\15\0\1\17"+
    "\4\0\1\17\2\0\5\17\1\62\10\17\1\63\12\17"+
    "\15\0\1\17\4\0\1\17\2\0\13\17\1\64\1\17"+
    "\1\65\10\17\1\66\2\17\15\0\1\17\4\0\1\17"+
    "\2\0\1\17\1\67\7\17\1\70\1\17\1\71\2\17"+
    "\1\72\12\17\15\0\1\17\4\0\1\17\2\0\16\17"+
    "\1\73\12\17\15\0\1\17\4\0\1\17\2\0\6\17"+
    "\1\74\5\17\1\75\1\76\13\17\15\0\1\17\4\0"+
    "\1\17\2\0\16\17\1\77\12\17\15\0\1\17\4\0"+
    "\1\17\2\0\1\17\1\100\3\17\1\101\15\17\1\102"+
    "\5\17\15\0\1\17\4\0\1\17\2\0\1\17\1\103"+
    "\16\17\1\104\2\17\1\105\5\17\15\0\1\17\4\0"+
    "\1\17\2\0\5\17\1\106\23\17\15\0\1\17\4\0"+
    "\1\17\2\0\10\17\1\107\11\17\1\110\1\111\1\17"+
    "\1\112\1\17\1\113\1\17\15\0\1\17\4\0\1\17"+
    "\2\0\10\17\1\114\7\17\1\115\10\17\15\0\1\17"+
    "\4\0\1\17\2\0\16\17\1\116\12\17\15\0\1\17"+
    "\4\0\1\17\2\0\10\17\1\117\20\17\44\0\1\120"+
    "\31\0\1\10\36\0\1\10\6\0\1\45\11\0\1\43"+
    "\3\0\30\43\14\0\1\10\45\0\1\45\15\0\1\47"+
    "\3\0\30\47\1\0\1\45\2\0\1\45\10\0\1\46"+
    "\4\0\1\47\3\0\30\47\1\0\1\45\2\0\1\121"+
    "\10\0\1\47\4\0\1\47\1\122\1\0\31\47\1\0"+
    "\1\121\16\0\1\10\1\4\51\0\1\17\4\0\1\17"+
    "\2\0\21\17\1\123\7\17\15\0\1\17\4\0\1\17"+
    "\2\0\21\17\1\124\7\17\15\0\1\17\4\0\1\17"+
    "\2\0\16\17\1\125\12\17\15\0\1\17\4\0\1\17"+
    "\2\0\5\17\1\126\23\17\15\0\1\17\4\0\1\17"+
    "\2\0\22\17\1\127\6\17\15\0\1\17\4\0\1\17"+
    "\2\0\21\17\1\130\1\131\6\17\15\0\1\17\4\0"+
    "\1\17\2\0\1\17\1\132\27\17\15\0\1\17\4\0"+
    "\1\17\2\0\1\17\1\133\27\17\15\0\1\17\4\0"+
    "\1\17\2\0\15\17\1\134\13\17\15\0\1\17\4\0"+
    "\1\17\2\0\6\17\1\135\22\17\15\0\1\17\4\0"+
    "\1\17\2\0\23\17\1\136\5\17\15\0\1\17\4\0"+
    "\1\17\2\0\21\17\1\130\7\17\15\0\1\17\4\0"+
    "\1\17\2\0\23\17\1\137\5\17\15\0\1\17\4\0"+
    "\1\17\2\0\22\17\1\140\6\17\15\0\1\17\4\0"+
    "\1\17\2\0\13\17\1\141\15\17\15\0\1\17\4\0"+
    "\1\17\2\0\15\17\1\142\13\17\15\0\1\17\4\0"+
    "\1\17\2\0\16\17\1\143\12\17\15\0\1\17\4\0"+
    "\1\17\2\0\20\17\1\74\10\17\15\0\1\17\4\0"+
    "\1\17\2\0\22\17\1\144\6\17\15\0\1\17\4\0"+
    "\1\17\2\0\17\17\1\145\11\17\15\0\1\17\4\0"+
    "\1\17\2\0\21\17\1\146\1\147\6\17\15\0\1\17"+
    "\4\0\1\17\2\0\15\17\1\150\13\17\15\0\1\17"+
    "\4\0\1\17\2\0\22\17\1\151\6\17\15\0\1\17"+
    "\4\0\1\17\2\0\25\17\1\74\3\17\15\0\1\17"+
    "\4\0\1\17\2\0\13\17\1\152\15\17\15\0\1\17"+
    "\4\0\1\17\2\0\3\17\1\153\25\17\15\0\1\17"+
    "\4\0\1\17\2\0\11\17\1\154\4\17\1\155\12\17"+
    "\15\0\1\17\4\0\1\17\2\0\2\17\1\156\26\17"+
    "\15\0\1\17\4\0\1\17\2\0\22\17\1\157\6\17"+
    "\15\0\1\17\4\0\1\17\2\0\16\17\1\160\12\17"+
    "\15\0\1\17\4\0\1\17\2\0\1\17\1\161\16\17"+
    "\1\162\10\17\15\0\1\17\4\0\1\17\2\0\17\17"+
    "\1\163\11\17\15\0\1\17\4\0\1\17\2\0\11\17"+
    "\1\164\17\17\15\0\1\17\4\0\1\17\2\0\15\17"+
    "\1\165\13\17\15\0\1\17\4\0\1\17\2\0\11\17"+
    "\1\166\6\17\1\167\10\17\15\0\1\17\4\0\1\17"+
    "\2\0\1\17\1\170\21\17\1\171\3\17\1\74\1\17"+
    "\15\0\1\17\4\0\1\17\2\0\11\17\1\172\1\17"+
    "\1\173\15\17\15\0\1\17\4\0\1\17\2\0\11\17"+
    "\1\174\17\17\26\0\1\175\33\0\1\121\16\0\1\122"+
    "\33\0\1\121\2\0\1\122\17\0\1\176\32\0\1\122"+
    "\13\0\1\17\4\0\1\17\2\0\22\17\1\177\6\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\200\23\17"+
    "\15\0\1\17\4\0\1\17\2\0\13\17\1\201\15\17"+
    "\15\0\1\17\4\0\1\17\2\0\1\17\1\202\27\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\203\23\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\74\23\17"+
    "\15\0\1\17\4\0\1\17\2\0\3\17\1\204\25\17"+
    "\15\0\1\17\4\0\1\17\2\0\20\17\1\203\10\17"+
    "\15\0\1\17\4\0\1\17\2\0\21\17\1\166\7\17"+
    "\15\0\1\17\4\0\1\17\2\0\21\17\1\205\1\206"+
    "\6\17\15\0\1\17\4\0\1\17\2\0\1\17\1\207"+
    "\27\17\15\0\1\17\4\0\1\17\2\0\2\17\1\210"+
    "\26\17\15\0\1\17\4\0\1\17\2\0\14\17\1\74"+
    "\14\17\15\0\1\17\4\0\1\17\2\0\5\17\1\211"+
    "\23\17\15\0\1\17\4\0\1\17\2\0\21\17\1\171"+
    "\7\17\15\0\1\17\4\0\1\17\2\0\1\17\1\212"+
    "\27\17\15\0\1\17\4\0\1\17\2\0\1\17\1\213"+
    "\27\17\15\0\1\17\4\0\1\17\2\0\16\17\1\74"+
    "\12\17\15\0\1\17\4\0\1\17\2\0\13\17\1\214"+
    "\2\17\1\200\12\17\15\0\1\17\4\0\1\17\2\0"+
    "\22\17\1\215\6\17\4\0\1\216\10\0\1\17\4\0"+
    "\1\217\2\0\1\17\4\217\1\220\23\217\1\0\1\216"+
    "\13\0\1\17\4\0\1\17\2\0\7\17\1\203\21\17"+
    "\15\0\1\17\4\0\1\17\2\0\11\17\1\221\17\17"+
    "\15\0\1\17\4\0\1\17\2\0\13\17\1\74\15\17"+
    "\15\0\1\17\4\0\1\17\2\0\12\17\1\222\16\17"+
    "\15\0\1\17\4\0\1\17\2\0\24\17\1\223\4\17"+
    "\15\0\1\17\4\0\1\17\2\0\22\17\1\224\6\17"+
    "\15\0\1\17\4\0\1\17\2\0\13\17\1\225\15\17"+
    "\15\0\1\17\4\0\1\17\2\0\23\17\1\226\5\17"+
    "\15\0\1\17\4\0\1\17\2\0\20\17\1\213\10\17"+
    "\15\0\1\17\4\0\1\17\2\0\22\17\1\225\6\17"+
    "\15\0\1\17\4\0\1\17\2\0\11\17\1\227\17\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\72\23\17"+
    "\15\0\1\17\4\0\1\17\2\0\22\17\1\131\6\17"+
    "\15\0\1\17\4\0\1\17\2\0\3\17\1\230\25\17"+
    "\15\0\1\17\4\0\1\17\2\0\21\17\1\74\7\17"+
    "\15\0\1\17\4\0\1\17\2\0\16\17\1\231\12\17"+
    "\15\0\1\17\4\0\1\17\2\0\15\17\1\232\13\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\233\23\17"+
    "\15\0\1\17\4\0\1\17\2\0\4\17\1\74\24\17"+
    "\15\0\1\17\4\0\1\17\2\0\1\17\1\234\27\17"+
    "\15\0\1\17\4\0\1\17\2\0\13\17\1\130\15\17"+
    "\40\0\1\235\21\0\1\176\13\0\1\236\36\0\1\176"+
    "\13\0\1\17\4\0\1\17\2\0\20\17\1\237\10\17"+
    "\15\0\1\17\4\0\1\17\2\0\20\17\1\205\10\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\240\23\17"+
    "\15\0\1\17\4\0\1\17\2\0\12\17\1\74\16\17"+
    "\4\0\1\216\10\0\1\17\4\0\1\217\2\0\1\17"+
    "\30\217\1\0\1\216\13\0\1\17\4\0\1\17\2\0"+
    "\10\17\1\74\20\17\15\0\1\17\4\0\1\17\2\0"+
    "\22\17\1\74\6\17\15\0\1\17\4\0\1\17\2\0"+
    "\11\17\1\241\17\17\15\0\1\17\4\0\1\17\2\0"+
    "\23\17\1\242\5\17\15\0\1\17\4\0\1\17\2\0"+
    "\13\17\1\127\15\17\15\0\1\17\4\0\1\17\2\0"+
    "\15\17\1\243\13\17\15\0\1\17\4\0\1\17\2\0"+
    "\13\17\1\244\15\17\15\0\1\17\4\0\1\17\2\0"+
    "\22\17\1\203\6\17\15\0\1\17\4\0\1\17\2\0"+
    "\5\17\1\245\23\17\15\0\1\17\4\0\1\17\2\0"+
    "\1\17\1\246\27\17\4\0\1\216\15\0\1\247\3\0"+
    "\30\247\1\0\1\216\2\0\1\250\10\0\1\217\2\0"+
    "\1\251\1\0\1\217\2\0\31\217\1\0\1\250\2\0"+
    "\1\250\10\0\1\217\2\0\1\251\1\0\1\217\2\0"+
    "\20\217\1\252\10\217\1\0\1\250\13\0\1\17\4\0"+
    "\1\17\2\0\24\17\1\130\4\17\15\0\1\17\4\0"+
    "\1\17\2\0\1\17\1\253\27\17\15\0\1\17\4\0"+
    "\1\17\2\0\1\17\1\254\27\17\15\0\1\17\4\0"+
    "\1\17\2\0\5\17\1\255\23\17\15\0\1\17\4\0"+
    "\1\17\2\0\11\17\1\256\17\17\15\0\1\17\4\0"+
    "\1\17\2\0\20\17\1\257\10\17\15\0\1\17\4\0"+
    "\1\17\2\0\3\17\1\260\25\17\15\0\1\17\4\0"+
    "\1\17\2\0\10\17\1\261\20\17\15\0\1\17\4\0"+
    "\1\17\2\0\25\17\1\262\3\17\15\0\1\17\4\0"+
    "\1\17\2\0\21\17\1\263\7\17\4\0\1\45\10\0"+
    "\1\17\4\0\1\264\2\0\1\17\30\264\1\0\1\45"+
    "\13\0\1\17\4\0\1\17\2\0\22\17\1\117\6\17"+
    "\26\0\1\265\71\0\1\266\30\0\1\17\4\0\1\17"+
    "\2\0\1\17\1\267\27\17\15\0\1\17\4\0\1\17"+
    "\2\0\1\17\1\270\27\17\15\0\1\17\4\0\1\17"+
    "\2\0\15\17\1\271\13\17\15\0\1\17\4\0\1\17"+
    "\2\0\13\17\1\205\15\17\15\0\1\17\4\0\1\17"+
    "\2\0\4\17\1\166\24\17\15\0\1\17\4\0\1\17"+
    "\2\0\13\17\1\272\15\17\15\0\1\17\4\0\1\17"+
    "\2\0\14\17\1\273\14\17\15\0\1\17\4\0\1\17"+
    "\2\0\15\17\1\274\13\17\4\0\1\250\10\0\1\247"+
    "\2\0\1\251\1\0\1\247\2\0\31\247\1\0\1\250"+
    "\2\0\1\250\13\0\1\251\36\0\1\250\2\0\1\251"+
    "\3\0\1\275\4\0\1\276\15\0\1\277\13\0\1\300"+
    "\6\0\1\301\1\251\2\0\1\250\10\0\1\217\2\0"+
    "\1\251\1\0\1\217\2\0\6\217\1\302\22\217\1\0"+
    "\1\250\13\0\1\17\4\0\1\17\2\0\7\17\1\130"+
    "\21\17\15\0\1\17\4\0\1\17\2\0\22\17\1\130"+
    "\6\17\15\0\1\17\4\0\1\17\2\0\3\17\1\303"+
    "\25\17\15\0\1\17\4\0\1\17\2\0\3\17\1\74"+
    "\25\17\15\0\1\17\4\0\1\17\2\0\15\17\1\74"+
    "\13\17\15\0\1\17\4\0\1\17\2\0\22\17\1\304"+
    "\6\17\15\0\1\17\4\0\1\17\2\0\20\17\1\305"+
    "\10\17\15\0\1\17\4\0\1\17\2\0\11\17\1\306"+
    "\17\17\4\0\1\121\10\0\1\264\4\0\1\264\1\122"+
    "\1\0\31\264\1\0\1\121\25\0\1\307\60\0\1\310"+
    "\40\0\1\17\4\0\1\17\2\0\3\17\1\205\25\17"+
    "\15\0\1\17\4\0\1\17\2\0\15\17\1\203\13\17"+
    "\15\0\1\17\4\0\1\17\2\0\23\17\1\130\5\17"+
    "\15\0\1\17\4\0\1\17\2\0\27\17\1\74\1\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\311\23\17"+
    "\15\0\1\17\4\0\1\17\2\0\3\17\1\312\25\17"+
    "\22\0\1\313\3\0\30\313\4\0\1\314\7\0\1\315"+
    "\1\276\1\316\40\0\1\314\24\0\1\317\74\0\1\320"+
    "\54\0\1\321\15\0\1\250\10\0\1\217\2\0\1\251"+
    "\1\0\1\217\2\0\1\217\1\322\27\217\1\0\1\250"+
    "\13\0\1\17\4\0\1\17\2\0\22\17\1\323\6\17"+
    "\15\0\1\17\4\0\1\17\2\0\6\17\1\324\22\17"+
    "\15\0\1\17\4\0\1\17\2\0\16\17\1\325\12\17"+
    "\15\0\1\17\4\0\1\17\2\0\5\17\1\326\23\17"+
    "\45\0\1\327\62\0\1\330\20\0\1\17\4\0\1\17"+
    "\2\0\15\17\1\331\13\17\15\0\1\17\4\0\1\17"+
    "\2\0\5\17\1\332\23\17\10\0\1\314\11\0\1\313"+
    "\3\0\30\313\4\0\1\314\11\0\1\316\40\0\1\314"+
    "\2\0\1\314\10\0\1\315\1\316\40\0\1\314\36\0"+
    "\1\333\65\0\1\334\33\0\1\335\33\0\1\250\10\0"+
    "\1\217\2\0\1\251\1\0\1\217\2\0\3\217\1\336"+
    "\25\217\1\0\1\250\13\0\1\17\4\0\1\17\2\0"+
    "\5\17\1\172\23\17\15\0\1\17\4\0\1\17\2\0"+
    "\17\17\1\74\11\17\15\0\1\17\4\0\1\17\2\0"+
    "\15\17\1\337\13\17\15\0\1\17\4\0\1\17\2\0"+
    "\15\17\1\205\13\17\26\0\1\340\33\0\1\330\3\0"+
    "\1\341\4\0\1\342\15\0\1\343\13\0\1\344\6\0"+
    "\1\345\1\330\13\0\1\17\4\0\1\17\2\0\22\17"+
    "\1\166\6\17\15\0\1\17\4\0\1\17\2\0\16\17"+
    "\1\346\12\17\46\0\1\334\41\0\1\314\63\0\1\347"+
    "\21\0\1\250\10\0\1\217\2\0\1\251\1\0\1\217"+
    "\2\0\5\217\1\350\23\217\1\0\1\250\13\0\1\17"+
    "\4\0\1\17\2\0\11\17\1\351\17\17\60\0\1\352"+
    "\17\0\1\353\3\0\30\353\14\0\1\354\1\342\5\0"+
    "\1\355\60\0\1\356\74\0\1\357\54\0\1\360\26\0"+
    "\1\17\4\0\1\17\2\0\6\17\1\74\22\17\26\0"+
    "\1\361\44\0\1\17\4\0\1\17\2\0\30\17\1\323"+
    "\12\0\1\45\53\0\1\362\11\0\1\353\3\0\30\353"+
    "\15\0\1\354\5\0\1\355\36\0\1\355\10\0\1\363"+
    "\41\0\1\355\36\0\1\364\65\0\1\365\33\0\1\366"+
    "\56\0\1\367\51\0\1\355\36\0\1\370\10\0\1\363"+
    "\6\0\1\371\32\0\1\370\44\0\1\365\41\0\1\362"+
    "\63\0\1\372\62\0\1\373\14\0\1\370\17\0\1\371"+
    "\32\0\1\370\2\0\1\371\11\0\1\374\40\0\1\371"+
    "\24\0\1\375\55\0\1\376\56\0\1\377\106\0\1\u0100"+
    "\42\0\1\u0101\22\0\1\314\71\0\1\u0102\107\0\1\u0103"+
    "\7\0\1\362\46\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11546];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\31\1\6\0\50\1\3\0"+
    "\52\1\2\0\17\1\1\0\16\1\2\0\10\1\3\0"+
    "\13\1\2\0\6\1\5\0\5\1\2\0\2\1\3\0"+
    "\1\11\3\0\5\1\2\0\2\1\3\0\2\1\6\0"+
    "\1\1\1\0\2\1\22\0\1\11\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
          // fall through
          case 7: break;
          case 2:
            { /*Ignorar estos símbolos*/
            }
          // fall through
          case 8: break;
          case 3:
            { System.out.println("Lexema: " + yytext());
            }
          // fall through
          case 9: break;
          case 4:
            { System.out.println("Reservada: " + yytext());
            }
          // fall through
          case 10: break;
          case 5:
            { System.out.println("Declaración de variable: " + yytext());
            }
          // fall through
          case 11: break;
          case 6:
            { System.out.println("Declaración de arreglo: " + yytext());
            }
          // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
